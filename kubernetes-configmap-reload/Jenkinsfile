@Library('jenkins-shared-library@main') _

pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'        //region_comment
    EKS_CLUSTER = 'first-eks-cluster'       //eks_cluster_comment
  }
  
  parameters {
    choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
    string(name: 'ImageName', description: "Name of the docker build", defaultValue: "kubernetes-configmap-reload")
    string(name: 'ImageTag', description: "Docker image tag", defaultValue: "v1")
    string(name: 'AppName', description: "Name of the Application", defaultValue: "kubernetes-configmap-reload")
    string(name: 'docker_repo', description: "DockerHub username/repo", defaultValue: "sonali1897")
  }

  tools {
    maven 'maven3' // Ensure this matches your Jenkins global Maven configuration
  }

  stages {

    stage('Git Checkout') {
      when { expression { params.action == 'create' } }
      steps {
        gitCheckout(
          branch: "main",
          url: "https://github.com/sonali18vats/spring-cloud-kubernetes.git"
        )
      }
    }

    stage('Maven Build') {
      when { expression { params.action == 'create' } }
      steps {
        dir("${params.AppName}") {
          sh 'mvn clean package'
        }
      }
    }

    stage('Docker Build and Push') {
      when { expression { params.action == 'create' } }
      steps {
        dir("${params.AppName}") {
          dockerBuild("${params.ImageName}", "${params.docker_repo}", "${params.ImageTag}")
        }
      }
    }

    stage('Docker Cleanup') {
      when { expression { params.action == 'create' } }
      steps {
        dockerCleanup("${params.ImageName}", "${params.docker_repo}", "${params.ImageTag}")
      }
    }

    stage('Ansible Setup') {
      when { expression { params.action == 'create' } }
      steps {
        sh "ansible-playbook \"${WORKSPACE}/${params.AppName}/server_setup.yml\""
      }
    }

    stage('Create Deployment') {
      when { expression { params.action == 'create' } }
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_credential']
        ]) {
          sh """
            aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
            kubectl apply -f \"${WORKSPACE}/${params.AppName}/kubernetes-configmap.yml\"
          """
        }
      }
    }

    stage('Wait for Pods') {
      when { expression { params.action == 'create' } }
      steps {
        sh 'sleep 60' // You can adjust time as needed
      }
    }

    stage('Rollback Deployment') {
      when { expression { params.action == 'rollback' } }
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_credential']
        ]) {
          sh """
            aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
            kubectl delete deploy ${params.AppName} || true
            kubectl delete svc ${params.AppName} || true
          """
        }
      }
    }
  }
}
